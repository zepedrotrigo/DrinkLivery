version: '3.1'

services:
  manager-fe:
    build:
      context: ../frontend/manager
      dockerfile: Dockerfile
    volumes:
      - '../frontend/manager:/frontend/manager'
    ports:
      - 3000:3000
    networks:
      my-network:
        ipv4_address: 172.18.0.2
    stdin_open: true
  rider-fe:
    build:
      context: ../frontend/rider
      dockerfile: Dockerfile
    volumes:
      - '../frontend/rider:/frontend/rider'
    ports:
      - 3001:3000
    networks:
      my-network:
        ipv4_address: 172.18.0.3
    stdin_open: true
  user-fe:
    build:
      context: ../frontend/user
      dockerfile: Dockerfile
    volumes:
      - '../frontend/user:/frontend/user'
    ports:
      - 3002:3000
    networks:
      my-network:
        ipv4_address: 172.18.0.4
    stdin_open: true

  services-api:
    build:
      context: ./services_api
      dockerfile: Dockerfile
    volumes:
      - './services_api:/services_api'
    networks:
      my-network:
        ipv4_address: 172.18.0.5

  user-app-api:
    build:
      context: ./user_app_api
      dockerfile: Dockerfile
    volumes:
      - './user_app_api:/user_app_api'
    networks:
      my-network:
        ipv4_address: 172.18.0.8

  db:
    image: mysql:8.0.28
    restart: always
    command: --character-set-server=utf8mb4 --collation-server=utf8mb4_unicode_ci
    environment:
        MYSQL_ROOT_PASSWORD: password
        MYSQL_DATABASE: drinklivery
        MYSQL_USER: user
        MYSQL_PASSWORD: password
    ports:
        - "9906:3306"
    networks:
      my-network:
        ipv4_address: 172.18.0.6
    volumes:
      - ./db/src:/docker-entrypoint-initdb.d # import .sql files
      - ./db/sql-db:/var/lib/mysql # save db state

  adminer:
    image: adminer
    restart: always
    ports:
      - 8080:8080
    depends_on:
      - db
    networks:
      my-network:
        ipv4_address: 172.18.0.7

networks: 
  my-network:
    ipam:
      driver: default
      config:
        - subnet: 172.18.0.0/16